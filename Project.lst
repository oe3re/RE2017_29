Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/03/17 18:35:31
wavmux.asm						     Page 1 - 1


				include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				 GetFileSize proto, hFile: handle, lpFileSizeHigh: ptr dword;Win32 API function

 00000000			.const
 = 46464952				riffConst EQU "FFIR" ;Marking the riff type of file
 = 45564157				waveConst EQU "EVAW" ;File type header mark
 = 20746D66				formatChunkConst EQU " tmf"; Format chunk marker
 = 61746164				dataConst EQU "atad" ;Marking the begining of data section
 = 00040000				inBuffSize EQU 262144 ; 256KB
 = 00080000				outBuffSize EQU 524288; Min size 44 bytes, 512KB 
 = 00000104				maxPathLen EQU 260 ;Max path length for MS-DOS, 260 ASCII characters

 00000000			.data
 00000000 00000010			sampleSize dword 16 ;Sample bit size, default value 16 bit
 00000004 0002				channels word 2; Number of channels, default value 2
 00000006 0000AC44			sampleRate dword 44100; Sample rate, default value 44100 (CD) 48000 (DVD)
 0000000A 0002B110			byteRate dword 176400; (sampleRate *sampleSize*channels)/8

 0000000E 57 41 56 4D 55		consoleTitle byte "WAVMUX",0h
	   58 00

 00000015				introText label byte
 00000015  3D 3D 3D 3D 3D		byte "============================================================================",0ah
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 0A
 00000062  7C 20 20 20 20		byte "|                                W A V M U X                               |",0ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 57 20
	   41 20 56 20 4D
	   20 55 20 58 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 0A
 000000AF  7C 50 72 6F 67		byte "|Program that muxes two .wav                       Authors: Petar Marin    |",0ah
	   72 61 6D 20 74
	   68 61 74 20 6D
	   75 78 65 73 20
	   74 77 6F 20 2E
	   77 61 76 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 41 75 74 68
	   6F 72 73 3A 20
	   50 65 74 61 72
	   20 4D 61 72 69
	   6E 20 20 20 20
	   7C 0A
 000000FC  7C 6D 6F 6E 6F		byte "|mono files into single .wav stereo file                    Igor Beracka   |",0ah
	   20 66 69 6C 65
	   73 20 69 6E 74
	   6F 20 73 69 6E
	   67 6C 65 20 2E
	   77 61 76 20 73
	   74 65 72 65 6F
	   20 66 69 6C 65
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   49 67 6F 72 20
	   42 65 72 61 63
	   6B 61 20 20 20
	   7C 0A
 00000149  3D 3D 3D 3D 3D		byte "============================================================================",0ah,0ah
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 0A 0A
 00000197 00000182			introTextSize dword ($ - introText)

 0000019B				message1 label byte
 0000019B  45 6E 74 65 72		byte "Enter left channel filepath: "
	   20 6C 65 66 74
	   20 63 68 61 6E
	   6E 65 6C 20 66
	   69 6C 65 70 61
	   74 68 3A 20
 000001B8 0000001D			message1Size dword ($ - message1)

 000001BC				message2 label byte
 000001BC  45 6E 74 65 72		byte "Enter right channel filepath: "
	   20 72 69 67 68
	   74 20 63 68 61
	   6E 6E 65 6C 20
	   66 69 6C 65 70
	   61 74 68 3A 20
 000001DA 0000001E			message2Size dword ($ - message2)
					
 000001DE				message3 label byte
 000001DE  45 52 52 4F 52		byte "ERROR: Filepath doesn't exist!",0ah
	   3A 20 46 69 6C
	   65 70 61 74 68
	   20 64 6F 65 73
	   6E 27 74 20 65
	   78 69 73 74 21
	   0A
 000001FD 0000001F			message3Size dword ($ - message3)

 00000201				message4 label byte
 00000201  45 6E 74 65 72		byte "Enter output filepath: "
	   20 6F 75 74 70
	   75 74 20 66 69
	   6C 65 70 61 74
	   68 3A 20
 00000218 00000017			message4Size dword ($ - message4)

 0000021C				message5 label byte
 0000021C  45 52 52 4F 52		byte "ERROR: File can't be created",0ah
	   3A 20 46 69 6C
	   65 20 63 61 6E
	   27 74 20 62 65
	   20 63 72 65 61
	   74 65 64 0A
 00000239 0000001D			message5Size dword ($ - message5)

 0000023D				message6 label byte
 0000023D  46 69 6E 69 73		byte "Finished!",0ah,0ah
	   68 65 64 21 0A
	   0A
 00000248 0000000B			message6Size dword ($ - message6)

 00000000			.data?
 00000000 00000000			fileSize dword ?
 00000004 00000000			dataSize dword ?
 00000008 00000000			consoleInputHandle handle ?
 0000000C 00000000			consoleOutputHandle handle ?
 00000010 00000000			lchFileHnd handle ?
 00000014 00000000			rchFileHnd handle ?
 00000018 00000000			outFileHnd handle ?
 0000001C 00000000			lchFilepathSize dword ?
 00000020 00000000			rchFilepathSize dword ?
 00000024 00000000			outFilepathSize dword ?

 00000028  00080000 [			outBuff byte outBuffSize DUP(?) 
	    00
	   ]
 00080028  00040000 [			in1Buff byte inBuffSize DUP(?)
	    00
	   ]
 000C0028  00040000 [			in2Buff byte inBuffSize DUP(?)
	    00
	   ]
					
 00100028  00000104 [			lchFilepath byte maxPathLen DUP(?);Left channel filepath
	    00
	   ]
 0010012C  00000104 [			rchFilepath byte maxPathLen DUP(?);Right channel filepath
	    00
	   ]
 00100230  00000104 [			outFilepath byte maxPathLen DUP(?);Output filepath
	    00
	   ]
					
 00000000			.code
 00000000			populateOutBuff proc 
					;ecx = local counter
					;edx = how many bytes to move in output buffer
 00000000  51				push ecx
 00000001  50				push eax
 00000002  B9 00000000			mov ecx, 0; initialising local counter
 00000007  66| 8B 06			lp: mov ax, [esi]
 0000000A  66| 89 07			mov [edi], ax
 0000000D  83 C6 02			add esi, 2
 00000010  83 C7 02			add edi, 2
 00000013  66| 8B 03			mov ax, [ebx]
 00000016  66| 89 07			mov [edi], ax
 00000019  83 C3 02			add ebx, 2
 0000001C  83 C7 02			add edi, 2
 0000001F  83 C1 04			add ecx, 4
 00000022  3B CA			cmp ecx, edx
 00000024  75 E1			jne lp
					
 00000026  58				pop eax
 00000027  59				pop ecx
 00000028  C3				ret
 00000029			populateOutBuff endp

 00000029			main proc
					invoke SetConsoleTitle, ADDR consoleTitle
 00000029  68 0000000E R   *	    push   OFFSET consoleTitle
 0000002E  E8 00000000 E   *	    call   SetConsoleTitleA
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 00000033  6A F5	   *	    push    -00000000Bh
 00000035  E8 00000000 E   *	    call   GetStdHandle
 0000003A  A3 0000000C R		mov consoleOutputHandle, eax
					invoke GetStdHandle, STD_INPUT_HANDLE
 0000003F  6A F6	   *	    push    -00000000Ah
 00000041  E8 00000000 E   *	    call   GetStdHandle
 00000046  A3 00000008 R		mov consoleInputHandle, eax
					invoke WriteConsole, consoleOutputHandle, ADDR introtext, introtextSize, 0, 0
 0000004B  6A 00	   *	    push   +000000000h
 0000004D  6A 00	   *	    push   +000000000h
 0000004F  FF 35 00000197 R *	    push   introTextSize
 00000055  68 00000015 R   *	    push   OFFSET introText
 0000005A  FF 35 0000000C R *	    push   consoleOutputHandle
 00000060  E8 00000000 E   *	    call   WriteConsoleA

					;Opening left channel file
 00000065			j1: invoke WriteConsole, consoleOutputHandle, ADDR message1, message1Size, 0, 0
 00000065  6A 00	   *	    push   +000000000h
 00000067  6A 00	   *	    push   +000000000h
 00000069  FF 35 000001B8 R *	    push   message1Size
 0000006F  68 0000019B R   *	    push   OFFSET message1
 00000074  FF 35 0000000C R *	    push   consoleOutputHandle
 0000007A  E8 00000000 E   *	    call   WriteConsoleA
					invoke ReadConsole, consoleInputHandle, ADDR lchFilepath, maxPathLen, ADDR lchFilepathSize, 0
 0000007F  6A 00	   *	    push   +000000000h
 00000081  68 0000001C R   *	    push   OFFSET lchFilepathSize
 00000086  68 00000104	   *	    push   +000000104h
 0000008B  68 00100028 R   *	    push   OFFSET lchFilepath
 00000090  FF 35 00000008 R *	    push   consoleInputHandle
 00000096  E8 00000000 E   *	    call   ReadConsoleA
 0000009B  BA 00100028 R		mov edx, offset lchFilepath
 000000A0  8B 0D 0000001C R		mov ecx, lchFilepathSize
 000000A6  8B F2			mov esi, edx
 000000A8  B0 00			mov al, 0h
					;Inserting 0h string termination char
 000000AA  88 44 0E FE			mov [ecx+esi-2], al
					;Getting input file 1 handle
 000000AE  E8 00000000 E		call OpenInputFile
 000000B3  A3 00000010 R		mov lchFileHnd, eax
 000000B8  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 000000BB  75 1C			jne j2
					;Error msg
					invoke WriteConsole, consoleOutputHandle, ADDR message3, message3Size, 0, 0
 000000BD  6A 00	   *	    push   +000000000h
 000000BF  6A 00	   *	    push   +000000000h
 000000C1  FF 35 000001FD R *	    push   message3Size
 000000C7  68 000001DE R   *	    push   OFFSET message3
 000000CC  FF 35 0000000C R *	    push   consoleOutputHandle
 000000D2  E8 00000000 E   *	    call   WriteConsoleA
 000000D7  EB 8C			jmp j1

					;Opening right channel file
 000000D9			j2: invoke WriteConsole, consoleOutputHandle, ADDR message2, message2Size, 0, 0
 000000D9  6A 00	   *	    push   +000000000h
 000000DB  6A 00	   *	    push   +000000000h
 000000DD  FF 35 000001DA R *	    push   message2Size
 000000E3  68 000001BC R   *	    push   OFFSET message2
 000000E8  FF 35 0000000C R *	    push   consoleOutputHandle
 000000EE  E8 00000000 E   *	    call   WriteConsoleA
					invoke ReadConsole, consoleInputHandle, ADDR rchFilepath, maxPathLen, ADDR rchFilepathSize, 0
 000000F3  6A 00	   *	    push   +000000000h
 000000F5  68 00000020 R   *	    push   OFFSET rchFilepathSize
 000000FA  68 00000104	   *	    push   +000000104h
 000000FF  68 0010012C R   *	    push   OFFSET rchFilepath
 00000104  FF 35 00000008 R *	    push   consoleInputHandle
 0000010A  E8 00000000 E   *	    call   ReadConsoleA
 0000010F  BA 0010012C R		mov edx, offset rchFilepath
 00000114  8B 0D 00000020 R		mov ecx, rchFilepathSize
 0000011A  8B F2			mov esi, edx
 0000011C  B0 00			mov al, 0h
					;Inserting 0h string termination char
 0000011E  88 44 0E FE			mov [ecx+esi-2], al
					;Getting input file 1 handle
 00000122  E8 00000000 E		call OpenInputFile
 00000127  A3 00000014 R		mov rchFileHnd, eax
 0000012C  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 0000012F  75 1C			jne j3
					;Error msg
					invoke WriteConsole, consoleOutputHandle, ADDR message3, message3Size, 0, 0
 00000131  6A 00	   *	    push   +000000000h
 00000133  6A 00	   *	    push   +000000000h
 00000135  FF 35 000001FD R *	    push   message3Size
 0000013B  68 000001DE R   *	    push   OFFSET message3
 00000140  FF 35 0000000C R *	    push   consoleOutputHandle
 00000146  E8 00000000 E   *	    call   WriteConsoleA
 0000014B  EB 8C			jmp j2

					;Creating output file
 0000014D			j3: invoke WriteConsole, consoleOutputHandle, ADDR message4, message4Size, 0, 0
 0000014D  6A 00	   *	    push   +000000000h
 0000014F  6A 00	   *	    push   +000000000h
 00000151  FF 35 00000218 R *	    push   message4Size
 00000157  68 00000201 R   *	    push   OFFSET message4
 0000015C  FF 35 0000000C R *	    push   consoleOutputHandle
 00000162  E8 00000000 E   *	    call   WriteConsoleA
					invoke ReadConsole, consoleInputHandle, ADDR outFilepath, maxPathLen, ADDR outFilepathSize, 0
 00000167  6A 00	   *	    push   +000000000h
 00000169  68 00000024 R   *	    push   OFFSET outFilepathSize
 0000016E  68 00000104	   *	    push   +000000104h
 00000173  68 00100230 R   *	    push   OFFSET outFilepath
 00000178  FF 35 00000008 R *	    push   consoleInputHandle
 0000017E  E8 00000000 E   *	    call   ReadConsoleA
 00000183  BA 00100230 R		mov edx, offset outFilepath
 00000188  8B 0D 00000024 R		mov ecx, outFilepathSize
 0000018E  8B F2			mov esi, edx
 00000190  B0 00			mov al, 0h
					;Inserting 0h string termination char
 00000192  88 44 0E FE			mov [ecx+esi-2], al
 00000196  88 44 0E FF			mov [ecx+esi-1], al
 0000019A  E8 00000000 E		call CreateOutputFile
 0000019F  A3 00000018 R		mov outFileHnd, eax
 000001A4  83 F8 FF			cmp eax, INVALID_HANDLE_VALUE
 000001A7  75 1C			jne j4
					;Error msg
					invoke WriteConsole, consoleOutputHandle, ADDR message5, message5Size, 0, 0
 000001A9  6A 00	   *	    push   +000000000h
 000001AB  6A 00	   *	    push   +000000000h
 000001AD  FF 35 00000239 R *	    push   message5Size
 000001B3  68 0000021C R   *	    push   OFFSET message5
 000001B8  FF 35 0000000C R *	    push   consoleOutputHandle
 000001BE  E8 00000000 E   *	    call   WriteConsoleA
 000001C3  EB 88			jmp j3

					;Writing file header to output file buffer
 000001C5  BF 00000028 R	j4: mov edi, offset outBuff
 000001CA  B8 46464952			mov eax, riffConst
 000001CF  89 07			mov [edi], eax
 000001D1  83 C7 04			add edi, 4;shifting buffer pointer
 000001D4  B8 00000004 R		mov eax, offset dataSize
					;Calculating file size
					invoke GetFileSize, lchFileHnd, 0
 000001D9  6A 00	   *	    push   +000000000h
 000001DB  FF 35 00000010 R *	    push   lchFileHnd
 000001E1  E8 00000000 E   *	    call   GetFileSize
 000001E6  A3 00000004 R		mov dataSize, eax
					invoke GetFileSize, rchFileHnd, 0
 000001EB  6A 00	   *	    push   +000000000h
 000001ED  FF 35 00000014 R *	    push   rchFileHnd
 000001F3  E8 00000000 E   *	    call   GetFileSize
 000001F8  03 05 00000004 R		add eax, dataSize
 000001FE  A3 00000004 R		mov dataSize, eax
 00000203  83 C0 24			add eax, 36; filesize = headersize + datasize - 8, headersize = 44-8 bytes, 8 bytes read already
 00000206  A3 00000000 R		mov fileSize, eax
 0000020B  89 07			mov [edi], eax ;writing fileSize to buffer
 0000020D  83 C7 04			add edi, 4
 00000210  B8 45564157			mov eax, waveConst
 00000215  89 07			mov [edi], eax
 00000217  83 C7 04			add edi, 4
 0000021A  B8 20746D66			mov eax, formatChunkConst
 0000021F  89 07			mov [edi], eax
 00000221  83 C7 04			add edi, 4
 00000224  B8 00000010			mov eax, 16;Length of format data
 00000229  89 07			mov [edi], eax; to output buffer byte 17-20
 0000022B  83 C7 04			add edi, 4
 0000022E  66| B8 0001			mov ax, 1;value=1 for PCM format
 00000232  66| 89 07			mov [edi], ax; to output buffer byte 21-22
 00000235  83 C7 02			add edi, 2
 00000238  66| A1			mov ax, channels; default value=2 channels
	   00000004 R
 0000023E  66| 89 07			mov [edi], ax 
 00000241  83 C7 02			add edi, 2
 00000244  A1 00000006 R		mov eax, sampleRate; default value 44100
 00000249  89 07			mov [edi], eax
 0000024B  83 C7 04			add edi, 4
 0000024E  A1 0000000A R		mov eax, byteRate
 00000253  89 07			mov [edi], eax
 00000255  83 C7 04			add edi, 4
 00000258  66| B8 0004			mov ax, 4; bitrate*channels/8
 0000025C  66| 89 07			mov [edi], ax
 0000025F  83 C7 02			add edi, 2
 00000262  A1 00000000 R		mov eax, sampleSize
 00000267  89 07			mov [edi], eax
 00000269  83 C7 02			add edi, 2
 0000026C  B8 61746164			mov eax, dataConst
 00000271  89 07			mov [edi], eax
 00000273  83 C7 04			add edi, 4
 00000276  A1 00000004 R		mov eax, dataSize
 0000027B  89 07			mov [edi], eax
 0000027D  83 C7 04			add edi, 4
					;Header is loaded in buffer
					;Writing header to file
 00000280  A1 00000018 R		mov eax, outFileHnd
 00000285  BA 00000028 R		mov edx, offset outBuff
 0000028A  B9 0000002C			mov ecx, 44
 0000028F  E8 00000000 E		call WriteToFile
					;skipping header from input files
					invoke SetFilePointer, lchFileHnd, 44, 0, 0;moving file pointer to position 44
 00000294  6A 00	   *	    push   +000000000h
 00000296  6A 00	   *	    push   +000000000h
 00000298  6A 2C	   *	    push   +00000002Ch
 0000029A  FF 35 00000010 R *	    push   lchFileHnd
 000002A0  E8 00000000 E   *	    call   SetFilePointer
					invoke SetFilePointer, rchFileHnd, 44, 0, 0
 000002A5  6A 00	   *	    push   +000000000h
 000002A7  6A 00	   *	    push   +000000000h
 000002A9  6A 2C	   *	    push   +00000002Ch
 000002AB  FF 35 00000014 R *	    push   rchFileHnd
 000002B1  E8 00000000 E   *	    call   SetFilePointer
					;Reading from input buffers
 000002B6  A1 00000010 R	ld:	mov eax, lchFileHnd
 000002BB  BA 00080028 R		mov edx, offset in1Buff
 000002C0  B9 00040000			mov ecx, inBuffSize
 000002C5  E8 00000000 E		call ReadFromFile
 000002CA  A1 00000014 R		mov eax, rchFileHnd
 000002CF  BA 000C0028 R		mov edx, offset in2Buff
 000002D4  B9 00040000			mov ecx, inBuffSize
 000002D9  E8 00000000 E		call ReadFromFile
 000002DE  BE 00080028 R		mov esi, offset in1Buff;reseting input buffer pointer
 000002E3  BB 000C0028 R		mov ebx, offset in2Buff;
 000002E8  BF 00000028 R		mov edi, offset outBuff;reseting output buffer pointer
 000002ED  3D 00040000			cmp eax, inBuffSize
 000002F2  75 20			jne eof
 000002F4  BA 00080000			mov edx, outBuffSize; input value for procedure populateOutBuff
 000002F9  E8 FFFFFD02			call populateOutBuff
					;writing output buffer to file
 000002FE  A1 00000018 R		mov eax, outFileHnd
 00000303  BA 00000028 R		mov edx, offset outBuff
 00000308  B9 00080000			mov ecx, outBuffSize
 0000030D  E8 00000000 E		call WriteToFile
 00000312  EB A2			jmp ld
 00000314  8B D0		eof:mov edx,eax; eof-End of file label,  procedure populateOutBuff counter end value
 00000316  D1 E2			shl edx, 1 ;Output buffer is 2 times larger than input buffer
 00000318  E8 FFFFFCE3			call populateOutBuff

					;Writing output buffer to file
 0000031D  A1 00000018 R		mov eax, outFileHnd
 00000322  8B CA			mov ecx, edx
 00000324  BA 00000028 R		mov edx, offset outBuff
 00000329  E8 00000000 E		call WriteToFile
					
					;Closing files
 0000032E  A1 00000010 R		mov eax, lchFileHnd
 00000333  E8 00000000 E		call CloseFile
 00000338  A1 00000014 R		mov eax, rchFileHnd
 0000033D  E8 00000000 E		call CloseFile
 00000342  A1 00000018 R		mov eax, outFileHnd
 00000347  E8 00000000 E		call CloseFile
					invoke WriteConsole, consoleOutputHandle, ADDR message6, message6Size, 0, 0
 0000034C  6A 00	   *	    push   +000000000h
 0000034E  6A 00	   *	    push   +000000000h
 00000350  FF 35 00000248 R *	    push   message6Size
 00000356  68 0000023D R   *	    push   OFFSET message6
 0000035B  FF 35 0000000C R *	    push   consoleOutputHandle
 00000361  E8 00000000 E   *	    call   WriteConsoleA
					
					invoke ExitProcess,0
 00000366  6A 00	   *	    push   +000000000h
 00000368  E8 00000000 E   *	    call   ExitProcess
 0000036D			main endp
				end main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    06/03/17 18:35:31
wavmux.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CONST  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'CONST'	 ReadOnly
FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_BSS . . . . . . . . . . . . . .	32 Bit	 00100334 Para	  Public  'BSS'  
_DATA  . . . . . . . . . . . . .	32 Bit	 0000024C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000036D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileSize  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000029 _TEXT	Length= 00000344 Public STDCALL
  j1 . . . . . . . . . . . . . .	L Near	 00000065 _TEXT	
  j2 . . . . . . . . . . . . . .	L Near	 000000D9 _TEXT	
  j3 . . . . . . . . . . . . . .	L Near	 0000014D _TEXT	
  j4 . . . . . . . . . . . . . .	L Near	 000001C5 _TEXT	
  ld . . . . . . . . . . . . . .	L Near	 000002B6 _TEXT	
  eof  . . . . . . . . . . . . .	L Near	 00000314 _TEXT	
populateOutBuff  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000029 Public STDCALL
  lp . . . . . . . . . . . . . .	L Near	 00000007 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteRate . . . . . . . . . . . .	DWord	 0000000A _DATA	
channels . . . . . . . . . . . .	Word	 00000004 _DATA	
consoleInputHandle . . . . . . .	DWord	 00000008 _BSS	
consoleOutputHandle  . . . . . .	DWord	 0000000C _BSS	
consoleTitle . . . . . . . . . .	Byte	 0000000E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dataConst  . . . . . . . . . . .	Number	 61746164h   
dataSize . . . . . . . . . . . .	DWord	 00000004 _BSS	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00000000 _BSS	
formatChunkConst . . . . . . . .	Number	 20746D66h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
in1Buff  . . . . . . . . . . . .	Byte	 00080028 _BSS	
in2Buff  . . . . . . . . . . . .	Byte	 000C0028 _BSS	
inBuffSize . . . . . . . . . . .	Number	 00040000h   
introTextSize  . . . . . . . . .	DWord	 00000197 _DATA	
introText  . . . . . . . . . . .	Byte	 00000015 _DATA	
lchFileHnd . . . . . . . . . . .	DWord	 00000010 _BSS	
lchFilepathSize  . . . . . . . .	DWord	 0000001C _BSS	
lchFilepath  . . . . . . . . . .	Byte	 00100028 _BSS	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxPathLen . . . . . . . . . . .	Number	 00000104h   
message1Size . . . . . . . . . .	DWord	 000001B8 _DATA	
message1 . . . . . . . . . . . .	Byte	 0000019B _DATA	
message2Size . . . . . . . . . .	DWord	 000001DA _DATA	
message2 . . . . . . . . . . . .	Byte	 000001BC _DATA	
message3Size . . . . . . . . . .	DWord	 000001FD _DATA	
message3 . . . . . . . . . . . .	Byte	 000001DE _DATA	
message4Size . . . . . . . . . .	DWord	 00000218 _DATA	
message4 . . . . . . . . . . . .	Byte	 00000201 _DATA	
message5Size . . . . . . . . . .	DWord	 00000239 _DATA	
message5 . . . . . . . . . . . .	Byte	 0000021C _DATA	
message6Size . . . . . . . . . .	DWord	 00000248 _DATA	
message6 . . . . . . . . . . . .	Byte	 0000023D _DATA	
outBuffSize  . . . . . . . . . .	Number	 00080000h   
outBuff  . . . . . . . . . . . .	Byte	 00000028 _BSS	
outFileHnd . . . . . . . . . . .	DWord	 00000018 _BSS	
outFilepathSize  . . . . . . . .	DWord	 00000024 _BSS	
outFilepath  . . . . . . . . . .	Byte	 00100230 _BSS	
rchFileHnd . . . . . . . . . . .	DWord	 00000014 _BSS	
rchFilepathSize  . . . . . . . .	DWord	 00000020 _BSS	
rchFilepath  . . . . . . . . . .	Byte	 0010012C _BSS	
red  . . . . . . . . . . . . . .	Number	 00000004h   
riffConst  . . . . . . . . . . .	Number	 46464952h   
sampleRate . . . . . . . . . . .	DWord	 00000006 _DATA	
sampleSize . . . . . . . . . . .	DWord	 00000000 _DATA	
waveConst  . . . . . . . . . . .	Number	 45564157h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
